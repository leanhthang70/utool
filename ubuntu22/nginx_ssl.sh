#!/bin/bash

# Enhanced Nginx SSL Setup Script
# This script provides flexible Nginx installation with SSL configuration

# Save original directory
ORIGINAL_DIR="$(pwd)"
export ORIGINAL_DIR

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Source common functions with error checking
COMMON_FILE="$SCRIPT_DIR/common.sh"
if [[ -f "$COMMON_FILE" ]]; then
    source "$COMMON_FILE"
else
    echo "Error: Cannot find common.sh at $COMMON_FILE"
    echo "Current directory: $(pwd)"
    echo "Script directory: $SCRIPT_DIR"
    exit 1
fi

# Script configuration
SCRIPT_NAME="Nginx SSL Setup"
NGINX_CONF_DIR="/etc/nginx"
SITES_AVAILABLE="$NGINX_CONF_DIR/sites-available"
SITES_ENABLED="$NGINX_CONF_DIR/sites-enabled"
CONF_D="$NGINX_CONF_DIR/conf.d"

# Print header
echo "================================================================"
echo "              üîí $SCRIPT_NAME"
echo "================================================================"
log "INFO" "Starting Nginx SSL setup process"

# Function to configure firewall
configure_firewall() {
    if prompt_yes_no "Do you want to configure firewall for HTTP/HTTPS?" "y"; then
        show_progress "Configuring firewall"
        
        sudo ufw allow 80/tcp
        sudo ufw allow 443/tcp
        sudo ufw reload
        
        show_completion "Firewall configured"
    fi
}

# Function to install Nginx
install_nginx() {
    show_progress "Installing Nginx"
    
    if ! command -v nginx &> /dev/null; then
        install_package "nginx"
        enable_service "nginx"
        log "INFO" "Nginx installed and started"
    else
        log "INFO" "Nginx is already installed"
    fi
    
    show_completion "Nginx installation complete"
}

# Function to install Certbot
install_certbot() {
    show_progress "Installing Certbot"
    
    if ! command -v certbot &> /dev/null; then
        # Remove old certbot if exists
        sudo apt remove -y certbot
        
        # Install via snap
        sudo snap install core
        sudo snap refresh core
        sudo snap install --classic certbot
        
        # Create symlink
        sudo ln -sf /snap/bin/certbot /usr/bin/certbot
        
        log "INFO" "Certbot installed via snap"
    else
        log "INFO" "Certbot is already installed"
    fi
    
    show_completion "Certbot installation complete"
}

# Function to validate domain configuration
validate_domain_config() {
    local domain="$1"
    local user_deploy="$2"
    local project_path="/home/$user_deploy/$domain"
    
    # Validate domain format
    validate_domain "$domain"
    
    # Validate user exists
    validate_user_exists "$user_deploy"
    
    # Check if project directory exists
    if [[ ! -d "$project_path" ]]; then
        if prompt_yes_no "Project directory $project_path does not exist. Create it?" "y"; then
            sudo mkdir -p "$project_path/current/public"
            sudo chown -R "$user_deploy:$user_deploy" "$project_path"
            log "INFO" "Created project directory: $project_path"
        else
            error_exit "Project directory is required for Nginx configuration"
        fi
    fi
}

# Function to create SSL certificate
create_ssl_certificate() {
    local domain="$1"
    local email="$2"
    local use_staging="$3"
    
    show_progress "Creating SSL certificate for $domain"
    
    # Validate email
    validate_email "$email"
    
    # Prepare certbot command
    local certbot_cmd="sudo certbot --nginx --non-interactive --agree-tos"
    certbot_cmd+=" --email $email"
    certbot_cmd+=" -d $domain -d www.$domain"
    
    # Use staging if requested (for testing)
    if [[ "$use_staging" == "true" ]]; then
        certbot_cmd+=" --staging"
        log "INFO" "Using Let's Encrypt staging environment"
    fi
    
    # Run certbot
    if $certbot_cmd; then
        show_completion "SSL certificate created successfully"
    else
        error_exit "Failed to create SSL certificate"
    fi
    
    # Show certificate information
    sudo certbot certificates
}

# Function to generate Nginx configuration
generate_nginx_config() {
    local domain="$1"
    local user_deploy="$2"
    local config_type="$3"
    local nginx_file="$domain.conf"
    local config_path
    
    # Determine config location
    case "$config_type" in
        "sites-available")
            config_path="$SITES_AVAILABLE/$nginx_file"
            ;;
        "conf.d")
            config_path="$CONF_D/$nginx_file"
            ;;
        *)
            error_exit "Invalid config type: $config_type"
            ;;
    esac
    
    show_progress "Generating Nginx configuration"
    
    # Create configuration content
    local config_content="# Nginx configuration for $domain
# Generated by utool on $(date)

# HTTP redirect to HTTPS
server {
    listen 80;
    server_name $domain www.$domain;
    return 301 https://\$server_name\$request_uri;
}

# HTTPS configuration
server {
    listen 443 ssl http2;
    server_name $domain www.$domain;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/$domain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$domain/privkey.pem;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers
    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection \"1; mode=block\" always;
    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;
    
    # Document Root
    root /home/$user_deploy/$domain/current/public;
    index index.html index.htm index.php;
    
    # File Upload
    client_max_body_size 50M;
    
    # Gzip Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Cache Control
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\$ {
        expires 1y;
        add_header Cache-Control \"public, immutable\";
    }
    
    # Security - Block access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Main location
    location / {
        try_files \$uri \$uri/ =404;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Logging
    access_log /var/log/nginx/${domain}_access.log;
    error_log /var/log/nginx/${domain}_error.log;
}"
    
    # Backup existing config
    if [[ -f "$config_path" ]]; then
        backup_file "$config_path"
    fi
    
    # Write new configuration
    echo "$config_content" | sudo tee "$config_path" > /dev/null
    
    # Enable site if using sites-available
    if [[ "$config_type" == "sites-available" ]]; then
        sudo ln -sf "$config_path" "$SITES_ENABLED/"
        log "INFO" "Site enabled: $domain"
    fi
    
    show_completion "Nginx configuration generated"
}

# Function to test and reload Nginx
test_and_reload_nginx() {
    show_progress "Testing Nginx configuration"
    
    # Test configuration
    if sudo nginx -t; then
        log "INFO" "Nginx configuration test passed"
    else
        error_exit "Nginx configuration test failed"
    fi
    
    # Reload Nginx
    sudo systemctl reload nginx
    
    show_completion "Nginx reloaded successfully"
}

# Function to setup auto-renewal
setup_auto_renewal() {
    show_progress "Setting up SSL certificate auto-renewal"
    
    # Create renewal script
    local renewal_script="/usr/local/bin/certbot-renew.sh"
    
    cat << 'EOF' | sudo tee "$renewal_script" > /dev/null
#!/bin/bash
# SSL Certificate Auto-Renewal Script

# Renew certificates
certbot renew --quiet

# Reload Nginx if certificates were renewed
if [[ $? -eq 0 ]]; then
    systemctl reload nginx
    echo "$(date): SSL certificates renewed and Nginx reloaded" >> /var/log/certbot-renewal.log
fi
EOF
    
    sudo chmod +x "$renewal_script"
    
    # Add cron job
    local cron_job="0 2 * * * $renewal_script"
    (crontab -l 2>/dev/null; echo "$cron_job") | sudo crontab -
    
    show_completion "Auto-renewal configured"
}

# Function to show post-installation info
show_post_installation_info() {
    local domain="$1"
    
    echo ""
    echo "================================================================"
    echo "            üéâ Nginx SSL Setup Complete!"
    echo "================================================================"
    echo ""
    echo "üìã Configuration Summary:"
    echo "   ‚Ä¢ Domain: $domain"
    echo "   ‚Ä¢ SSL Certificate: ‚úÖ Installed"
    echo "   ‚Ä¢ Auto-renewal: ‚úÖ Configured"
    echo "   ‚Ä¢ Security Headers: ‚úÖ Enabled"
    echo "   ‚Ä¢ Gzip Compression: ‚úÖ Enabled"
    echo ""
    echo "üîß Configuration Files:"
    echo "   ‚Ä¢ Nginx config: $CONF_D/$domain.conf"
    echo "   ‚Ä¢ SSL certificates: /etc/letsencrypt/live/$domain/"
    echo "   ‚Ä¢ Renewal script: /usr/local/bin/certbot-renew.sh"
    echo ""
    echo "üìñ Useful Commands:"
    echo "   ‚Ä¢ sudo nginx -t                 - Test Nginx configuration"
    echo "   ‚Ä¢ sudo systemctl reload nginx   - Reload Nginx"
    echo "   ‚Ä¢ sudo certbot certificates     - List certificates"
    echo "   ‚Ä¢ sudo certbot renew --dry-run  - Test renewal"
    echo ""
    echo "üåê Your site should be available at:"
    echo "   ‚Ä¢ https://$domain"
    echo "   ‚Ä¢ https://www.$domain"
    echo "================================================================"
}

# Main setup function
main() {
    # Get user input
    local user_deploy
    local domain
    local email
    local use_staging
    
    user_deploy=$(prompt_with_default "Enter deployment user" "$DEFAULT_USER")
    validate_not_empty "$user_deploy" "Deployment user"
    
    read -p "Enter domain name (e.g., example.com): " domain
    validate_not_empty "$domain" "Domain name"
    
    read -p "Enter email for SSL certificate: " email
    validate_not_empty "$email" "Email"
    
    use_staging=$(prompt_yes_no "Use Let's Encrypt staging environment (for testing)?" "n")
    if [[ $? -eq 0 ]]; then
        use_staging="true"
    else
        use_staging="false"
    fi
    
    # Validate configuration
    validate_domain_config "$domain" "$user_deploy"
    
    # Confirm setup
    echo ""
    echo "üìã Configuration Summary:"
    echo "   ‚Ä¢ User: $user_deploy"
    echo "   ‚Ä¢ Domain: $domain"
    echo "   ‚Ä¢ Email: $email"
    echo "   ‚Ä¢ Staging: $use_staging"
    echo ""
    
    if ! prompt_yes_no "Proceed with Nginx SSL setup?" "y"; then
        log "INFO" "Setup cancelled by user"
        exit 0
    fi
    
    # Setup steps
    configure_firewall
    install_nginx
    install_certbot
    create_ssl_certificate "$domain" "$email" "$use_staging"
    generate_nginx_config "$domain" "$user_deploy" "conf.d"
    test_and_reload_nginx
    setup_auto_renewal
    show_post_installation_info "$domain"
    
    success "Nginx SSL setup completed successfully for domain: $domain"
}

# Run main function
main "$@"
