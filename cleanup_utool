#!/bin/bash

# UTool Cleanup Script
# This script removes temporary files, backups, and optimizes the utool directory

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(dirname "$0")"
ORIGINAL_DIR="$(pwd)"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_status "Starting UTool cleanup..."

# Remove backup files
print_status "Removing backup files..."
find "$SCRIPT_DIR" -name "*.backup" -type f -delete
find "$SCRIPT_DIR" -name "*.backup.*" -type f -delete

# Remove temporary files
print_status "Removing temporary files..."
find "$SCRIPT_DIR" -name "*.tmp" -type f -delete
find "$SCRIPT_DIR" -name "*.temp" -type f -delete

# Remove empty directories
print_status "Removing empty directories..."
find "$SCRIPT_DIR" -type d -empty -delete 2>/dev/null || true

# Remove logs older than 30 days
if [[ -d "/var/log/utool" ]]; then
    print_status "Cleaning old log files..."
    find /var/log/utool -name "*.log" -type f -mtime +30 -delete 2>/dev/null || true
fi

# Remove old backups
if [[ -d "/opt/backups" ]]; then
    print_status "Cleaning old backup files..."
    find /opt/backups -type f -mtime +30 -delete 2>/dev/null || true
fi

# Fix permissions
print_status "Fixing file permissions..."
find "$SCRIPT_DIR" -name "*.sh" -type f -exec chmod +x {} \;
find "$SCRIPT_DIR" -name "install_utool" -type f -exec chmod +x {} \;
find "$SCRIPT_DIR" -name "uninstall_utool" -type f -exec chmod +x {} \;

# Show cleanup summary
echo ""
echo "âœ… Cleanup completed successfully!"
echo ""
echo "ðŸ“Š Summary:"
echo "â€¢ Removed backup files"
echo "â€¢ Removed temporary files"
echo "â€¢ Cleaned old logs"
echo "â€¢ Fixed file permissions"
echo "â€¢ Removed empty directories"
echo ""
echo "ðŸ’¡ Your utool directory is now optimized!"

# Return to original directory
cd "$ORIGINAL_DIR"
